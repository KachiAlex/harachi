import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { 
  ChevronLeft, 
  ChevronRight, 
  Building2, 
  MapPin, 
  Users, 
  Settings,
  Check,
  Globe,
  Home,
  UserPlus,
  X,
  Wand2
} from 'lucide-react';
import toast from 'react-hot-toast';
import { useAuth } from '../../contexts/AuthContext';
import { useRole } from '../../contexts/RoleContext';
import { apiService } from '../../services/api';
import { Country, Branch } from '../../types';
import { generateCountryCode, generateCompanyCode } from '../../utils/codeGenerator';

interface SetupStep {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  completed: boolean;
}

const SetupWizard: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { canManageUsers, canManageBranches, canManageCountries } = useRole();
  const { companyCode } = useParams<{ companyCode: string }>();
  const [currentStep, setCurrentStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [companyId, setCompanyId] = useState<string | null>(null);
  const [setupMode, setSetupMode] = useState<'new' | 'resume'>('new');
  
  const [steps, setSteps] = useState<SetupStep[]>([
    {
      id: 'company-info',
      title: 'Company Information',
      description: 'Set up basic company details',
      icon: <Building2 className="h-6 w-6" />,
      completed: false
    },
    {
      id: 'countries',
      title: 'Countries & Locations',
      description: 'Add countries where you operate',
      icon: <Globe className="h-6 w-6" />,
      completed: false
    },
    {
      id: 'branches',
      title: 'Branches & Offices',
      description: 'Set up your branch locations',
      icon: <Home className="h-6 w-6" />,
      completed: false
    },
    {
      id: 'users',
      title: 'Team Members',
      description: 'Add users and assign roles',
      icon: <UserPlus className="h-6 w-6" />,
      completed: false
    },
    {
      id: 'settings',
      title: 'Final Settings',
      description: 'Configure system preferences',
      icon: <Settings className="h-6 w-6" />,
      completed: false
    }
  ]);

  const [formData, setFormData] = useState({
    companyName: '',
    companyCode: '',
    isCompanyCodeAutoGenerated: true,
    industry: '',
    address: '',
    phone: '',
    email: '',
    website: '',
    countries: [] as Country[],
    branches: [] as Branch[],
    users: [] as any[]
  });

  // State for current form inputs
  const [countryForm, setCountryForm] = useState({ name: '', code: '', isCodeAutoGenerated: true });
  const [branchForm, setBranchForm] = useState({ name: '', countryId: '', address: '', phone: '', email: '' });
  const [userForm, setUserForm] = useState({ name: '', email: '', username: '', role: 'Company Admin', password: '' });

  const initializeSetup = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      // Try to find existing company by code from URL
      if (companyCode) {
        const company = await apiService.getCompanyByCode(companyCode);
        
        if (company && company.id) {
          // Company exists - resume setup mode
          console.log('Found existing company, entering resume mode:', company.id);
          setCompanyId(company.id);
          setSetupMode('resume');
          
          // Load existing company data
          setFormData(prev => ({
            ...prev,
            companyName: company.name || '',
            companyCode: company.code || companyCode,
            isCompanyCodeAutoGenerated: false,
            industry: company.industry || '',
            address: company.address || '',
            phone: company.phone || '',
            email: company.email || '',
            website: company.website || ''
          }));

          // Load existing subcollections
          try {
            const [savedCountries, savedBranches, savedUsers] = await Promise.all([
              apiService.getCountries(company.id),
              apiService.getBranches(company.id),
              apiService.getUsers(company.id)
      ]);
      
      setFormData(prev => ({
        ...prev,
        countries: savedCountries,
              branches: savedBranches,
              users: savedUsers
            }));

            // Determine which step to start from
            if (savedUsers.length > 0) {
              setCurrentStep(4); // Go to final settings
            } else if (savedBranches.length > 0) {
              setCurrentStep(3); // Go to users
            } else if (savedCountries.length > 0) {
              setCurrentStep(2); // Go to branches
            } else if (company.name) {
              setCurrentStep(1); // Go to countries
            }
            
          } catch (subError) {
            console.warn('Error loading subcollections:', subError);
          }
        } else {
          // Company doesn't exist - new setup mode
          console.log('Company not found, entering new setup mode');
          setSetupMode('new');
          setFormData(prev => ({
            ...prev,
            companyCode: companyCode
          }));
        }
      } else {
        // No company code in URL - new setup
        setSetupMode('new');
      }
    } catch (err) {
      console.error('Error initializing setup:', err);
      toast.error('Failed to initialize setup. Please refresh and try again.');
    } finally {
      setLoading(false);
    }
  }, [companyCode]);

  // Initialize setup on component mount
  useEffect(() => {
    initializeSetup();
  }, [initializeSetup]);

  // Handle country name change and auto-generate code
  const handleCountryNameChange = (name: string) => {
    const autoGeneratedCode = generateCountryCode(name);
    setCountryForm({
      name: name,
      code: autoGeneratedCode,
      isCodeAutoGenerated: true
    });
  };

  // Handle manual code change
  const handleCountryCodeChange = (code: string) => {
    setCountryForm(prev => ({
      ...prev,
      code: code.toUpperCase(),
      isCodeAutoGenerated: false
    }));
  };

  // Handle company name change and auto-generate code
  const handleCompanyNameChange = (name: string) => {
    const autoGeneratedCode = generateCompanyCode(name);
    setFormData(prev => ({
      ...prev,
      companyName: name,
      companyCode: autoGeneratedCode,
      isCompanyCodeAutoGenerated: true
    }));
  };

  // Handle manual company code change
  const handleCompanyCodeChange = (code: string) => {
    setFormData(prev => ({
      ...prev,
      companyCode: code.toUpperCase(),
      isCompanyCodeAutoGenerated: false
    }));
  };

  // Country management functions
  const addCountry = async () => {
    // Enhanced validation
    if (!countryForm.name.trim()) {
      toast.error('Please enter a country name');
      return;
    }

    if (!countryForm.code.trim()) {
      toast.error('Please enter a country code');
      return;
    }

    if (countryForm.code.length < 2 || countryForm.code.length > 3) {
      toast.error('Country code must be 2-3 characters');
      return;
    }

    // Check for duplicate countries
    const isDuplicate = formData.countries.some(
      country => 
        country.name.toLowerCase() === countryForm.name.toLowerCase() ||
        country.code.toLowerCase() === countryForm.code.toLowerCase()
    );

    if (isDuplicate) {
      toast.error('Country with this name or code already exists');
      return;
    }

    // Ensure company exists before adding subcollections
    if (!companyId) {
      toast.error('Please complete company information first');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      const countryData = {
        name: countryForm.name.trim(),
        code: countryForm.code.trim().toUpperCase(),
        isActive: true,
        createdAt: new Date()
      };

      const countryId = await apiService.createCountry(companyId, countryData);
      
      // Add to local state
      const newCountry = { id: countryId, ...countryData };
      setFormData(prev => ({
        ...prev,
        countries: [...prev.countries, newCountry]
      }));
      
      // Clear form and show success
      setCountryForm({ name: '', code: '', isCodeAutoGenerated: true });
      toast.success(`${countryData.name} added successfully!`);
      
      // Mark step as completed if this is the first country
      if (formData.countries.length === 0) {
        markStepComplete(1);
      }
      
    } catch (err: any) {
      const errorMessage = err.message || 'Failed to add country. Please try again.';
      setError(errorMessage);
      toast.error(errorMessage);
      console.error('Error adding country:', err);
    } finally {
      setLoading(false);
    }
  };

  const removeCountry = async (countryId: string) => {
    if (!companyId) {
      toast.error('Company information not found');
      return;
    }
    
    try {
      setLoading(true);
      await apiService.deleteCountry(companyId, countryId);
      
      setFormData(prev => ({
        ...prev,
        countries: prev.countries.filter(country => country.id !== countryId)
      }));
      
      toast.success('Country removed successfully');
    } catch (err: any) {
      const errorMessage = err.message || 'Failed to remove country. Please try again.';
      toast.error(errorMessage);
      console.error('Error removing country:', err);
    } finally {
      setLoading(false);
    }
  };

  // Branch management functions
  const addBranch = async () => {
    // Enhanced validation
    if (!branchForm.name.trim()) {
      toast.error('Please enter a branch name');
      return;
    }

    if (!branchForm.countryId) {
      toast.error('Please select a country for the branch');
      return;
    }

    // Check for duplicate branches
    const isDuplicate = formData.branches.some(
      branch => branch.name.toLowerCase() === branchForm.name.toLowerCase()
    );

    if (isDuplicate) {
      toast.error('Branch with this name already exists');
      return;
    }

    if (!companyId) {
      toast.error('Please complete company information first');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      const branchData = {
        name: branchForm.name.trim(),
        code: branchForm.name.trim().replace(/\s+/g, '').substring(0, 10).toUpperCase(),
        address: branchForm.address.trim(),
        phone: branchForm.phone.trim(),
        email: branchForm.email.trim(),
        countryId: branchForm.countryId,
        isActive: true,
        createdAt: new Date()
      };

      const branchId = await apiService.createBranch(companyId, branchData);
      
      // Add to local state
      const newBranch = { id: branchId, ...branchData };
      setFormData(prev => ({
        ...prev,
        branches: [...prev.branches, newBranch]
      }));
      
      // Clear form and show success
      setBranchForm({ name: '', countryId: '', address: '', phone: '', email: '' });
      toast.success(`${branchData.name} branch added successfully!`);
      
    } catch (err: any) {
      const errorMessage = err.message || 'Failed to add branch. Please try again.';
      setError(errorMessage);
      toast.error(errorMessage);
      console.error('Error adding branch:', err);
    } finally {
      setLoading(false);
    }
  };

  // User management functions
  const addUser = async () => {
    if (!userForm.name.trim() || !userForm.email.trim() || !userForm.username.trim() || !userForm.role) {
      toast.error('Please fill name, email, username and role');
      return;
    }

    // Check for duplicate email or username
    const isDuplicateEmail = formData.users.some(u => u.email.toLowerCase() === userForm.email.toLowerCase());
    const isDuplicateUsername = formData.users.some(u => u.username.toLowerCase() === userForm.username.toLowerCase());

    if (isDuplicateEmail) {
      toast.error('A user with this email already exists');
      return;
    }

    if (isDuplicateUsername) {
      toast.error('A user with this username already exists');
      return;
    }

    if (!companyId) {
      toast.error('Please complete company information first');
      return;
    }

    try {
      setLoading(true);
      setError(null);

      console.log('Creating user for company:', companyId, userForm);
      // create lightweight user in Firestore for the setup phase
      const userId = await apiService.createCompanyUser(companyId, userForm);
      console.log('User created successfully with ID:', userId);

      const newUser = { id: userId, ...userForm };
      setFormData(prev => ({
        ...prev,
        users: [...prev.users, newUser as any]
      }));

      setUserForm({ name: '', email: '', username: '', role: 'Company Admin', password: '' });
      toast.success(`${userForm.name} added successfully!`);
    } catch (err: any) {
      const errorMessage = err?.message || 'Failed to add user. Please try again.';
      setError(errorMessage);
      toast.error(errorMessage);
      console.error('Error adding user:', err);
    } finally {
      setLoading(false);
    }
  };

  const removeUser = async (userId: string) => {
    if (!companyId) {
      toast.error('Company information not found');
      return;
    }
    try {
      setLoading(true);
      await apiService.deleteCompanyUser(userId);
      setFormData(prev => ({
        ...prev,
        users: prev.users.filter((u: any) => u.id !== userId)
      }));
      toast.success('User removed');
    } catch (err: any) {
      toast.error(err?.message || 'Failed to remove user');
    } finally {
      setLoading(false);
    }
  };

  const removeBranch = async (branchId: string) => {
    if (!companyId) {
      toast.error('Company information not found');
      return;
    }
    
    try {
      setLoading(true);
      await apiService.deleteBranch(companyId, branchId);
      
      setFormData(prev => ({
        ...prev,
        branches: prev.branches.filter(branch => branch.id !== branchId)
      }));
      
      toast.success('Branch removed successfully');
    } catch (err: any) {
      const errorMessage = err.message || 'Failed to remove branch. Please try again.';
      toast.error(errorMessage);
      console.error('Error removing branch:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleNext = async () => {
    try {
      setLoading(true);
      setError(null);

      // Step 0: Company Information - Create company document before proceeding
      if (currentStep === 0) {
        if (!formData.companyName.trim()) {
          toast.error('Please enter a company name');
          return;
        }
        if (!formData.companyCode.trim()) {
          toast.error('Please enter a company code');
          return;
        }

        // Create or update company document
        if (setupMode === 'new') {
          try {
            const newCompany = await apiService.createCompany({
              name: formData.companyName,
              code: formData.companyCode,
              industry: formData.industry,
              address: formData.address,
              phone: formData.phone,
              email: formData.email,
              website: formData.website,
              isSetupComplete: false,
              harachiId: 'default',
              adminUsername: 'admin',
              adminPassword: 'admin123'
            } as any);
            
            setCompanyId(newCompany.id);
            setSetupMode('resume');
            toast.success('Company created successfully!');
            console.log('Company created with ID:', newCompany.id);
          } catch (createError: any) {
            setError(createError.message || 'Failed to create company');
            toast.error(createError.message || 'Failed to create company. Please try again.');
            return;
          }
        } else {
          // Update existing company info
          if (companyId) {
            await apiService.updateCompany(companyId, {
              name: formData.companyName,
              code: formData.companyCode,
              industry: formData.industry,
              address: formData.address,
              phone: formData.phone,
              email: formData.email,
              website: formData.website
            });
            toast.success('Company information updated!');
          }
        }
        markStepComplete(0);
        setCurrentStep(1);
        return;
      }

      // Role-based access checks
      if (currentStep === 1 && !canManageCountries) {
        toast.error('You do not have permission to manage countries');
        return;
      }

      if (currentStep === 2 && !canManageBranches) {
        toast.error('You do not have permission to manage branches');
        return;
      }

      if (currentStep === 3 && !canManageUsers) {
        toast.error('You do not have permission to manage users');
        return;
      }

    // Validation for current step
    if (currentStep === 1 && formData.countries.length === 0) {
      toast.error('Please add at least one country before proceeding');
      return;
    }

      if (currentStep === 2 && formData.branches.length === 0) {
        toast.error('Please add at least one branch before proceeding');
        return;
      }

      if (currentStep === 3 && formData.users.length === 0) {
        toast.error('Please add at least one user before proceeding');
        return;
      }

      markStepComplete(currentStep);
    
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      // Complete setup
        await handleCompleteSetup();
      }
    } catch (err: any) {
      console.error('Error in handleNext:', err);
      setError(err.message || 'An error occurred');
      toast.error(err.message || 'An error occurred. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleCompleteSetup = async () => {
    try {
      setLoading(true);
      setError(null);

      // Final validation: ensure required entities exist
      if (formData.countries.length === 0) {
        toast.error('Add at least one country to complete setup');
        setCurrentStep(1);
        return;
      }
      if (formData.branches.length === 0) {
        toast.error('Add at least one branch to complete setup');
        setCurrentStep(2);
        return;
      }
      if (formData.users.length === 0) {
        toast.error('Add at least one user to complete setup');
        setCurrentStep(3);
        return;
      }

      if (!companyId) {
        throw new Error('Company ID not found. Please refresh and try again.');
      }

      console.log('Completing setup for company:', companyId);

      // Mark setup as complete
      await apiService.updateCompany(companyId, {
        isSetupComplete: true,
        setupCompletedAt: new Date(),
        updatedAt: new Date()
      });

      // Create a default license for the company
      try {
        await apiService.createLicense(companyId, {
          type: 'basic',
          seats: Math.max(formData.users.length, 5),
          status: 'active'
        });
        console.log('Created default license for company');
      } catch (licenseError) {
        console.warn('Failed to create license:', licenseError);
        // Don't fail the setup if license creation fails
      }

    // Mark all steps as completed
    setSteps(prev => prev.map(step => ({ ...step, completed: true })));
      
      // Set setup completion flag for CompanyPortal to recognize
      localStorage.setItem(`company_${formData.companyCode}_setup_complete`, 'true');
      
      // Show success message
      toast.success('🎉 Company setup completed successfully!', {
        duration: 4000,
        position: 'top-center',
      });
      
      // Wait a moment for the toast to be visible before navigating
      setTimeout(() => {
        navigate(`/company/${formData.companyCode}`);
      }, 500);
      
    } catch (err: any) {
      const errorMessage = err.message || 'Failed to complete setup. Please try again.';
      setError(errorMessage);
      toast.error(errorMessage);
      console.error('Error completing setup:', err);
    } finally {
      setLoading(false);
    }
  };

  const markStepComplete = (stepIndex: number) => {
    setSteps(prev => prev.map((step, index) => 
      index === stepIndex ? { ...step, completed: true } : step
    ));
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
            <h3 className="text-lg font-medium text-gray-900">Company Information</h3>
              {setupMode === 'resume' && (
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  Resuming Setup
                </span>
              )}
            </div>
            
            {setupMode === 'resume' && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="flex items-start">
                  <Building2 className="h-5 w-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0" />
                  <div>
                    <p className="text-sm text-blue-800 font-medium">Resuming Company Setup</p>
                    <p className="text-sm text-blue-700 mt-1">
                      Your company information is already saved. You can update it or continue to the next step.
                    </p>
                  </div>
                </div>
              </div>
            )}
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Company Name *
                </label>
                <input
                  type="text"
                  value={formData.companyName}
                  onChange={(e) => handleCompanyNameChange(e.target.value)}
                  className="input-field"
                  placeholder="Enter company name"
                  disabled={loading}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <div className="flex items-center space-x-2">
                    <span>Company Code *</span>
                    {formData.isCompanyCodeAutoGenerated && formData.companyCode && (
                      <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                        <Wand2 className="h-3 w-3 mr-1" />
                        Auto
                      </span>
                    )}
                  </div>
                </label>
                <div className="relative">
                <input
                  type="text"
                  value={formData.companyCode}
                    onChange={(e) => handleCompanyCodeChange(e.target.value.replace(/[^A-Z0-9]/g, ''))}
                    className="input-field pr-10"
                  placeholder="Enter company code"
                    maxLength={10}
                    disabled={loading}
                  />
                  {formData.isCompanyCodeAutoGenerated && (
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                      <Wand2 className="h-4 w-4 text-blue-500" />
                    </div>
                  )}
                </div>
                <p className="text-xs text-gray-500 mt-1">
                  {formData.isCompanyCodeAutoGenerated 
                    ? "Auto-generated from company name" 
                    : "Company code (custom)"
                  }
                </p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Industry
                </label>
                <select
                  value={formData.industry}
                  onChange={(e) => setFormData({ ...formData, industry: e.target.value })}
                  className="input-field"
                  disabled={loading}
                >
                  <option value="">Select Industry</option>
                  <option value="food-beverage">Food & Beverage</option>
                  <option value="retail">Retail</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="services">Services</option>
                  <option value="technology">Technology</option>
                  <option value="healthcare">Healthcare</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Phone Number
                </label>
                <input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                  className="input-field"
                  placeholder="Enter phone number"
                  disabled={loading}
                />
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Address
                </label>
                <textarea
                  value={formData.address}
                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                  className="input-field"
                  rows={3}
                  placeholder="Enter company address"
                  disabled={loading}
                />
              </div>
            </div>
          </div>
        );

      case 1:
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
            <h3 className="text-lg font-medium text-gray-900">Countries & Locations</h3>
              {formData.countries.length > 0 && (
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  {formData.countries.length} countr{formData.countries.length === 1 ? 'y' : 'ies'} added
                </span>
              )}
            </div>
            
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-start">
                <Globe className="h-5 w-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0" />
                <div>
                  <p className="text-sm text-blue-800 font-medium">Add Operating Countries</p>
                  <p className="text-sm text-blue-700 mt-1">
                Add the countries where your company operates. You can add branches for each country in the next step.
              </p>
                </div>
              </div>
            </div>
            
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <X className="h-5 w-5 text-red-600" />
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-red-800 font-medium">Error</p>
                    <p className="text-sm text-red-700 mt-1">{error}</p>
                  </div>
                </div>
              </div>
            )}
            
            <div className="space-y-4">
              {/* Country Input Form */}
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Country Name *
                    </label>
                <input
                  type="text"
                      placeholder="e.g., United States, Nigeria, United Kingdom"
                  value={countryForm.name}
                      onChange={(e) => handleCountryNameChange(e.target.value)}
                      className="input-field w-full"
                  disabled={loading}
                      onKeyPress={(e) => e.key === 'Enter' && addCountry()}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      <div className="flex items-center space-x-2">
                        <span>Country Code *</span>
                        {countryForm.isCodeAutoGenerated && countryForm.code && (
                          <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                            <Wand2 className="h-3 w-3 mr-1" />
                            Auto
                          </span>
                        )}
                      </div>
                    </label>
                    <div className="relative">
                <input
                  type="text"
                        placeholder="e.g., US, NG, UK"
                  value={countryForm.code}
                        onChange={(e) => handleCountryCodeChange(e.target.value.replace(/[^A-Z]/g, ''))}
                        className="input-field w-full pr-10"
                  disabled={loading}
                  maxLength={3}
                        onKeyPress={(e) => e.key === 'Enter' && addCountry()}
                      />
                      {countryForm.isCodeAutoGenerated && (
                        <div className="absolute inset-y-0 right-0 flex items-center pr-3">
                          <Wand2 className="h-4 w-4 text-blue-500" />
                        </div>
                      )}
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      {countryForm.isCodeAutoGenerated 
                        ? "Auto-generated from country name" 
                        : "2-3 letter code (custom)"
                      }
                    </p>
                  </div>
                </div>
                <div className="mt-4 flex justify-end">
                <button 
                  onClick={addCountry}
                    disabled={loading || !countryForm.name.trim() || !countryForm.code.trim()}
                    className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                  >
                    {loading ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        <span>Adding...</span>
                      </>
                    ) : (
                      <>
                        <span>Add Country</span>
                      </>
                    )}
                </button>
                </div>
              </div>
              
              {/* Countries List */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <h4 className="text-sm font-medium text-gray-900">
                    Added Countries ({formData.countries.length})
                  </h4>
                  {formData.countries.length > 0 && (
                    <p className="text-xs text-gray-500">
                      Click × to remove a country
                    </p>
                  )}
                </div>
                
                <div className="space-y-2 max-h-60 overflow-y-auto">
                  {formData.countries.length === 0 ? (
                    <div className="text-center py-12 text-gray-500 border-2 border-dashed border-gray-300 rounded-lg">
                      <Globe className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                      <p className="text-sm font-medium text-gray-900 mb-1">No countries added yet</p>
                      <p className="text-xs text-gray-500">Add at least one country to continue to the next step</p>
                    </div>
                  ) : (
                    formData.countries.map((country) => (
                      <div key={country.id} className="flex items-center justify-between p-4 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                        <div className="flex items-center space-x-3">
                          <div className="flex-shrink-0">
                            <MapPin className="h-5 w-5 text-blue-600" />
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-900">{country.name}</span>
                            <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                              {country.code}
                            </span>
                          </div>
                        </div>
                        <button 
                          onClick={() => removeCountry(country.id)}
                          disabled={loading}
                          className="flex-shrink-0 p-1 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                          title="Remove country"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    ))
                  )}
                </div>
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
            <h3 className="text-lg font-medium text-gray-900">Branches & Offices</h3>
              {formData.branches.length > 0 && (
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  {formData.branches.length} branch{formData.branches.length === 1 ? '' : 'es'} added
                </span>
              )}
            </div>
            
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-start">
                <Home className="h-5 w-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0" />
                <div>
                  <p className="text-sm text-blue-800 font-medium">Add Branch Locations</p>
                  <p className="text-sm text-blue-700 mt-1">
                Set up your branch locations. Each branch can have its own inventory and users.
              </p>
            </div>
              </div>
            </div>
            
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <X className="h-5 w-5 text-red-600" />
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-red-800 font-medium">Error</p>
                    <p className="text-sm text-red-700 mt-1">{error}</p>
                  </div>
                </div>
              </div>
            )}
            
            <div className="space-y-4">
              {/* Branch Input Form */}
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Branch Name *
                    </label>
                <input
                  type="text"
                      placeholder="e.g., New York Branch, Lagos Office"
                      value={branchForm.name}
                      onChange={(e) => setBranchForm({ ...branchForm, name: e.target.value })}
                      className="input-field w-full"
                      disabled={loading}
                      onKeyPress={(e) => e.key === 'Enter' && addBranch()}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Country *
                    </label>
                <select 
                      className="input-field w-full"
                  value={branchForm.countryId}
                  onChange={(e) => setBranchForm({ ...branchForm, countryId: e.target.value })}
                      disabled={loading}
                >
                  <option value="">Select Country</option>
                  {formData.countries.map((country) => (
                    <option key={country.id} value={country.id}>
                      {country.name} ({country.code})
                    </option>
                  ))}
                </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Address
                    </label>
                    <input
                      type="text"
                      placeholder="Branch address"
                      value={branchForm.address}
                      onChange={(e) => setBranchForm({ ...branchForm, address: e.target.value })}
                      className="input-field w-full"
                      disabled={loading}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Phone
                    </label>
                    <input
                      type="tel"
                      placeholder="Branch phone number"
                      value={branchForm.phone}
                      onChange={(e) => setBranchForm({ ...branchForm, phone: e.target.value })}
                      className="input-field w-full"
                      disabled={loading}
                    />
                  </div>
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Email
                    </label>
                    <input
                      type="email"
                      placeholder="Branch email address"
                      value={branchForm.email}
                      onChange={(e) => setBranchForm({ ...branchForm, email: e.target.value })}
                      className="input-field w-full"
                      disabled={loading}
                    />
                  </div>
                </div>
                <div className="mt-4 flex justify-end">
                  <button 
                    onClick={addBranch}
                    disabled={loading || !branchForm.name.trim() || !branchForm.countryId}
                    className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                  >
                    {loading ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        <span>Adding...</span>
                      </>
                    ) : (
                      <>
                        <span>Add Branch</span>
                      </>
                    )}
                </button>
              </div>
              </div>
              
              {/* Branches List */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <h4 className="text-sm font-medium text-gray-900">
                    Added Branches ({formData.branches.length})
                  </h4>
                  {formData.branches.length > 0 && (
                    <p className="text-xs text-gray-500">
                      Click × to remove a branch
                    </p>
                  )}
                </div>
                
                <div className="space-y-2 max-h-60 overflow-y-auto">
                  {formData.branches.length === 0 ? (
                    <div className="text-center py-12 text-gray-500 border-2 border-dashed border-gray-300 rounded-lg">
                      <Home className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                      <p className="text-sm font-medium text-gray-900 mb-1">No branches added yet</p>
                      <p className="text-xs text-gray-500">Add branches for your operating countries</p>
                    </div>
                  ) : (
                    formData.branches.map((branch) => {
                      const country = formData.countries.find(c => c.id === branch.countryId);
                      return (
                        <div key={branch.id} className="flex items-center justify-between p-4 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                    <div className="flex items-center space-x-3">
                            <div className="flex-shrink-0">
                              <Home className="h-5 w-5 text-blue-600" />
                            </div>
                      <div>
                              <span className="text-sm font-medium text-gray-900">{branch.name}</span>
                              <div className="flex items-center space-x-2 mt-1">
                                {country && (
                                  <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                                    {country.name}
                                  </span>
                                )}
                                {branch.address && (
                                  <span className="text-xs text-gray-500">{branch.address}</span>
                                )}
                      </div>
                    </div>
                  </div>
                          <button 
                            onClick={() => removeBranch(branch.id)}
                            disabled={loading}
                            className="flex-shrink-0 p-1 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            title="Remove branch"
                          >
                            <X className="h-4 w-4" />
                          </button>
                        </div>
                      );
                    })
                  )}
                </div>
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-medium text-gray-900">Team Members</h3>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <p className="text-sm text-blue-800">
                Add team members who will use the system. You can assign different roles and permissions.
              </p>
            </div>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input
                  type="text"
                  placeholder="Full name"
                  className="input-field"
                  value={userForm.name}
                  onChange={(e) => setUserForm({ ...userForm, name: e.target.value })}
                />
                <input
                  type="email"
                  placeholder="Email address"
                  className="input-field"
                  value={userForm.email}
                  onChange={(e) => setUserForm({ ...userForm, email: e.target.value })}
                />
                <input
                  type="text"
                  placeholder="Username"
                  className="input-field"
                  value={userForm.username}
                  onChange={(e) => setUserForm({ ...userForm, username: e.target.value })}
                />
                <select 
                  className="input-field"
                  value={userForm.role}
                  onChange={(e) => setUserForm({ ...userForm, role: e.target.value })}
                >
                  <option value="Company Admin">Company Admin</option>
                  <option value="Branch Manager">Branch Manager</option>
                  <option value="Staff Member">Staff Member</option>
                </select>
                <button 
                  className="btn-primary md:col-span-2"
                  onClick={addUser}
                  disabled={loading || !userForm.name || !userForm.email || !userForm.username}
                >
                  {loading ? 'Adding...' : 'Add User'}
                </button>
              </div>
              <div className="space-y-2">
                <p className="text-sm font-medium text-gray-700">Added Users:</p>
                <div className="space-y-2">
                  {Array.isArray(formData.users) && formData.users.length > 0 ? (
                    formData.users.map((u: any) => (
                      <div key={u.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <Users className="h-4 w-4 text-gray-500" />
                      <div>
                            <span className="text-sm text-gray-900">{u.name}</span>
                            <p className="text-xs text-gray-500">{u.email} - {u.role}</p>
                      </div>
                    </div>
                        <button className="text-red-600 hover:text-red-800 text-sm" onClick={() => removeUser(u.id)} disabled={loading}>Remove</button>
                  </div>
                    ))
                  ) : (
                    <div className="text-gray-500 text-sm">No users added yet</div>
                  )}
                </div>
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
            <h3 className="text-lg font-medium text-gray-900">Final Settings</h3>
            </div>
            
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-start">
                <Settings className="h-5 w-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0" />
                <div>
                  <p className="text-sm text-blue-800 font-medium">Configure System Preferences</p>
                  <p className="text-sm text-blue-700 mt-1">
                    Set up your system preferences and complete the setup process.
                  </p>
                </div>
              </div>
            </div>
            
            <div className="space-y-6">
              <div>
                <h4 className="text-md font-medium text-gray-900 mb-3">System Preferences</h4>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-900">Email Notifications</p>
                      <p className="text-xs text-gray-500">Receive notifications about system updates</p>
                    </div>
                    <input type="checkbox" className="rounded" defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-900">Auto-backup</p>
                      <p className="text-xs text-gray-500">Automatically backup data daily</p>
                    </div>
                    <input type="checkbox" className="rounded" defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-900">Two-factor Authentication</p>
                      <p className="text-xs text-gray-500">Require 2FA for admin accounts</p>
                    </div>
                    <input type="checkbox" className="rounded" />
                  </div>
                </div>
              </div>
              
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Company Setup</h1>
              <p className="text-sm text-gray-600">Configure your company settings</p>
            </div>
            <button
              onClick={() => navigate('/company/dashboard')}
              className="text-gray-600 hover:text-gray-900"
            >
              Skip Setup
            </button>
          </div>
        </div>
      </div>

      {/* Progress Bar */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center py-4">
            {steps.map((step, index) => (
              <div key={step.id} className="flex items-center">
                <div className={`flex items-center justify-center w-8 h-8 rounded-full border-2 ${
                  index <= currentStep
                    ? step.completed
                      ? 'bg-green-500 border-green-500 text-white'
                      : 'bg-blue-500 border-blue-500 text-white'
                    : 'bg-gray-100 border-gray-300 text-gray-500'
                }`}>
                  {step.completed ? (
                    <Check className="h-4 w-4" />
                  ) : (
                    <span className="text-sm font-medium">{index + 1}</span>
                  )}
                </div>
                <div className="ml-3 mr-6">
                  <p className={`text-sm font-medium ${
                    index <= currentStep ? 'text-gray-900' : 'text-gray-500'
                  }`}>
                    {step.title}
                  </p>
                  <p className="text-xs text-gray-500">{step.description}</p>
                </div>
                {index < steps.length - 1 && (
                  <div className={`w-12 h-0.5 mx-4 ${
                    index < currentStep ? 'bg-green-500' : 'bg-gray-300'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-lg shadow p-8">
          {renderStepContent()}
        </div>

        {/* Navigation */}
        <div className="flex justify-between items-center mt-8">
          <button
            onClick={handlePrevious}
            disabled={currentStep === 0}
            className="flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-gray-900 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronLeft className="h-4 w-4" />
            <span>Previous</span>
          </button>
          
          <button
            onClick={() => {
              markStepComplete(currentStep);
              handleNext();
            }}
            disabled={loading}
            className="flex items-center space-x-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                <span>Completing...</span>
              </>
            ) : (
              <>
            <span>{currentStep === steps.length - 1 ? 'Complete Setup' : 'Next'}</span>
            <ChevronRight className="h-4 w-4" />
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default SetupWizard;